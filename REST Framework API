from django.db import models
class MenuItem(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    price = models.DeciamlField(max_length=0, decimal_place=2)
    available = models.BooleanField(default=True)
    def __str__(self): return self.name

from reset_framework import serializers
from .models import MenuItem

class MenuIteamSerializer(serializers.MenuIteamSerializer):
    class Meta:
        model = MenuItem
        fields = ["id", "name", "description", "price", "available"]
    def validate_price(self, value):
        if value <= 0:
        raise serializers.ValidationError("Price must be a positive number.")
    return value

from reset_framework import viewsets, status
from reset_framework.response import Response
from .model import MenuItem
from .serializers import MenuIteamSerializer

class MenuIteamSerializer(viewsets.Viewsets):
    def update(self, request, pk=None):
        return self._save_item(requset, pk, partial=False)

    def partial_update(self, request, pk=None):
        return self._save_item(request, pk, partial=True)

    def _save_item(self, request, pk, partial):
        try:
           item = MenuIteam.objects.get(pk=pk)
        expect MenuItem.DoesNotExist:
              return Response({"error": "Menu item not foun"}, ststus=ststus.HTTP_404_NOT_FOUND) 

serializer =MenuIteamSerializer(item, data=request.data, partial=partial)
if serializer.is_valid():
    serializer.save()
    return Response(serializer.data, status=status.HTTP_200_OK)
retun Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)

from django.url import path
from .view import MenuIteamViewSet

menu_item_update = MenuIteamViewSet.as_view({"put", "update", "partial_update"})

urlpatterns = [
    path("menu-item/<int:pk>/", menu_item_update, name="menu-item-update"),
]
