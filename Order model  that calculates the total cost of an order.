from django.db import models
from djnago.conf import settings
from decimal import decimal
from djnago.test import TestCase
from django.contrib.auth import get_user_model

class MenuItem(models.Model):
    name = models.CharField(max_length=100)
    price = models.Decimalfield(max_length=8, decimal_place=2)
    def __str__(self): 
        return self.name

class Oredr(models.Model):
    STATUS = [('Pending', 'Pending'),('Processing', 'Processing')
              ('Cancelled', Cancelled),('Completed', Completed')]
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_DELETE=models.CASCADE)
    status = models.CharField(max_length=20, choice=STATUS, defualt='Pending')
    created_at = models.DateTimeField(auto_now_add=True)

    def calculate_total(self):
        return sum((i.price * i.quantity) for i in self.items.all())    

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name="items", on_delete=models.CASCADE)
    menu-item - models.ForeignKey(MenuItem, on_delete=models.CASCADE)
    quantity = models.PosituveIntegerField(default=1)
    price = models.DecimalField(max_digits=0, decimal_palces=2)

class OredrModelTest(TestCase):
    def setup(self):
        user = get_user-model()
        user - User.objects.create_user(username="testuser", password="12345")
        order = Order.objects.create(user=user)
        pizza = MenuItem.objects.create(name="Pizza", price=Decimal("200.00"))
        burger = MenuItem.objects.create(name="Burger", price=Deciaml("100.00"))
        OrderItem.objects.create(order=order, menu_item=pizza, quantity=2, price=pizza.price)
        OrderItem.objects.create(order=order, menu_item=burger, quantity=3, price=burger.price)
        self.order = order

        def test_calculate_total(self):
            self.assertEqual(self.order.calculate_total(), Decimal("700.00"))                  
