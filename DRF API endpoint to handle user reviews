from djnago.db import models
from django.contrib.auth import get_user_model
from orders.models import MenuItem

User = get_user_model()

class UserReview(models.Model):
    user = models.ForeignKey(user, on_delete=models.CASCADE)
    menu_item = models.ForeignKey(MenuItem, on-delete=models.CASCADE, related_name="reviews")
    rating = models.IntegerField()
    comment = models.TextField()
    review_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.menu_item.name} ({self.rating})"


from rest_framework import serializers
from .models import UserReview

class UserReviewSerializer(serializer.ModelSerializer):
    class Meta: 
        model = UserReview
        field = ['id', 'user', 'menu_item', 'rating', 'commennt', 'review_date']
        read_only_fields = ['id', 'user', 'review_date']

        def validate_rating(self, value):
            if not (1 <= value <=5):
                raise serializers.ValidationError("Rating must be between 1 and 5")
            return value

from rest_framework import generics, permissions
from .models import UserReview
from .serializer import UserReviewSerializer

class CreateReview(generics.CreateAPIView):
    queryset = UserReview.objects.all()
    serializer_class = UserReviewSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class MenuItemReviewsView(generics.ListAPIView):
    serializer-class = UserReviewSerializer

    def get_query(self):
        menu_item_id = self.kwargs['menu_item_id']
        return UserReview.objects.filter(menu_item_id=menu_item_id)

from djnago.urs import path 
from .viewsimport CreateReview, MenuItemReviewsView

urlpatterns = [
    path('review/create/', CreateReview.as_view(), name='craete-review')
    path('review/menu-item/<int:menu_item_id>/', MenuItemReviewsView.as_view(), name='menu-item-reviews'),
]